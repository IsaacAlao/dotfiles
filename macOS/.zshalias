# Set PATH, MANPATH, etc., for Homebrew.
eval "$(/opt/homebrew/bin/brew shellenv)"

# Aliases
alias ..="cd .."
alias ls="exa --tree -L 1"
alias nc="ncat"
alias cat="bat"
alias clr="clear"
alias dirs="dirs -v"
alias tree="exa --tree"
alias nano="nano -l"
alias diff="diff --color=always"
alias grep="grep --color=always"
alias openvpn="sudo openvpn"
alias pbclear="pbcopy < /dev/null"

# Functions

wttr() { curl -s "https://wttr.in/${1}"; return $? }

chtsh() { IFS="/"; curl -s "https://cht.sh/${*}"; return $? }

mkcd() { mkdir -p "$@" && cd "$_";  return $? }

mknote() {
  local num_line=1
  printf "Press ctrl-d to exit.\nNOTE:\n"
  printf "${num_line} " 
  while read line; do
    num_line=$((num_line+1))
    printf "${num_line} " 
    if [ ${#@} -gt 0 ]; then
      printf "${line}\n" >> "${1}" 
    fi
  done
}

editalias() { 
  vim "$HOME/.zshalias" && . "$HOME/.zshalias" \
	&& printf "\"%s\", updated and sourced.\n" "$(basename "${HOME}/.bash_aliases")";

  return $?
}

obsidian() { 
  local app_name="Obsidian"
  local obsidian_running="$(ps x | grep "${app_name}" | grep -cv grep)"

  if [ $((obsidian_running)) -ge 1 ]; then
    killall "${app_name}"
  else
	  open -a "${app_name}"
  fi

  return $?
}

keystroke() { 
  local app_name="Keystroke Pro" 
  local keystroke_running="$(ps x | grep "${app_name}" | grep -cv grep)"
  
  if [ $((keystroke_running)) -ge 1 ]; then
    killall "${app_name}"
  else
    open -a "${app_name}"
  fi

  return $?
}

# TODO(isaacalao): make this cleaner
scrncap() {
  [ -f /usr/sbin/screencapture ] && { 
    local ext="" argseq="" red="\x1B[31m" green="\x1B[32m" faint="\x1B[2m" reset="\x1B[0m" 
    local options=( "${faint}"{video,audio,click}"${reset}" )
    readonly red green faint reset

    for arg in ${@}; do
      [[ ${arg:0:1} == "v" && "${argseq}" != *"v"* ]] && { options[1]="${green}video${reset}"; argseq="${argseq}${arg:0:1}"; continue; } || \
      [[ ${arg:0:1} == "a" && "${argseq}" != *"g"* ]] && { options[2]="${green}audio${reset}"; argseq="${argseq}g"; continue; } || \
      [[ ${arg:0:1} == "c" && "${argseq}" != *"k"*  ]] && { options[3]="${green}click${reset}"; argseq="${argseq}k"; continue; }
    done;

    if [[ "${argseq}" == *"v"* ]]; then
      ext="mov"
    elif [[ "${argseq}" == *[kg]* ]]; then
      ext="png"
    else
      return $?
    fi

    printf " 
      Options enabled: ${options[*]} -> ${argseq:-${faint}NULL${reset}}  
      Extension: ${ext:-${faint}NULL${reset}}
    \n"

    [ ${#argseq} -ge 1 ] && /usr/sbin/screencapture "-${argseq}" "$([ -n "${@[$#@]}" ] && printf "%s" "${@[$#@]}" || date).${ext}" 

  } || return $?
}

battery() {
  local bgclr="\x1B[30m" \
  ascii_bar_color=("\x1B[3"{1..3}"m") \
  ascii_bar=(▄ ▅ ▆ ▇ █) \
  residual="$(/usr/sbin/ioreg -c AppleSmartBattery -w0 | grep -w CurrentCapacity | tr -d " " | cut -d "=" -f2)"
      
  if test $residual -le 25; then
    printf "${bgclr}${ascii_bar_color[1]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[1]}"
  elif [ $residual -gt 25 ] && [ $residual -lt 50 ]; then
    printf "${bgclr}${ascii_bar_color[3]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[2]}"
  elif [ $residual -ge 50 ] && [ $residual -lt 75 ]; then
    printf "${bgclr}${ascii_bar_color[3]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[3]}"
  elif [ $residual -ge 75 ] && [ $residual -lt 100 ]; then
    printf "${bgclr}${ascii_bar_color[2]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[4]}"
  else
    printf "${bgclr}${ascii_bar_color[2]}[%s%%] %s\x1B[0m\n" "$residual" "${ascii_bar[5]}"
  fi 
  	
  return $?
}

vim() { 
  if [ ${#@} -gt 0 ]; then
    nvim "${@}"
  else
    nvim "${PWD}"
  fi
}

: ' Old
play_tune() {
  tune=(/var/mp3/tunes/*);
 
  for idx in $(seq $#tune); 
  do
   [[ $(echo $tune[$idx] | grep "Chime2") ]] && (afplay $tune[$idx] &) > /dev/null 2>&1
  done
 
  unset idx tune;
} '
